# name: AKS Deployment Pipeline

# trigger:
# - main

# pool:
#   vmImage: 'ubuntu-latest'


# stages:
  # - stage: Backend_Setup
  #   displayName: "Backend Storage Setup"
  #   jobs:
  #     - job: Setup_Backend
  #       steps:
  #         - script: |
  #             echo "Setting up Terraform Backend Storage..."
              
  #             RESOURCE_GROUP_NAME="DevOps1-tfstate-rg"
  #             STORAGE_ACCOUNT_NAME="devopstfstatechamp"
  #             CONTAINER_NAME="tfstate"
  #             LOCATION="eastus"
              
  #             # Create Resource Group if not exists
  #             az group create --name $RESOURCE_GROUP_NAME --location $LOCATION || echo "Resource group already exists"

  #             # Create Storage Account if not exists
  #             az storage account create \
  #               --name $STORAGE_ACCOUNT_NAME \
  #               --resource-group $RESOURCE_GROUP_NAME \
  #               --location $LOCATION \
  #               --sku Standard_LRS || echo "Storage account already exists"

  #             # Create Blob Container if not exists
  #             CONNECTION_STRING=$(az storage account show-connection-string \
  #               --name $STORAGE_ACCOUNT_NAME \
  #               --resource-group $RESOURCE_GROUP_NAME \
  #               --query connectionString -o tsv)

  #             az storage container create \
  #               --name $CONTAINER_NAME \
  #               --connection-string $CONNECTION_STRING || echo "Container already exists"

  #             echo "Backend storage setup complete."
  #           displayName: "Setup Terraform Backend"

name: AKS Deployment Pipeline

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Terraform_Deploy
  # dependsOn: Backend_Setup
    jobs:
      - job: Deploy_Terraform
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'

          - script: |
              echo "Logging into Azure..."
              az login --tenant 9b321bdd-83fe-4696-b371-5381bd4f0454
            displayName: 'Azure Login'
          
          - script: |
              echo "Initializing Terraform..."
              cd solution
              terraform init
            displayName: 'Terraform Init'
          
          - script: |
              echo "Planning Terraform..."
              cd solution
              terraform plan -out=tfplan
            displayName: 'Terraform Plan'
          
          - script: |
              echo "Applying Terraform..."
              cd solution
              terraform apply -auto-approve
            displayName: "Terraform Apply"

  - stage: Monitoring_Setup
    displayName: "Prometheus and Grafana Setup"
    dependsOn: Terraform_Deploy
    jobs:
      - job: Monitoring
        displayName: "Install and Configure Monitoring"
        steps:
          - task: HelmInstaller@1
            displayName: "Install Helm"
            inputs:
              helmVersion: 'latest'

          - script: |
              echo "Getting AKS credentials..."
              az aks get-credentials --resource-group DevOps1-CapstoneProject-abd-test-rg --name DevOps1-CapstoneProject-abd-test-aks --overwrite-existing

              echo "Creating monitoring namespace..."
              kubectl create namespace monitoring || echo "Namespace already exists"

              echo "Adding Helm repos..."
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo add grafana https://grafana.github.io/helm-charts
              helm repo update

              echo "Installing Prometheus..."
              helm install prometheus prometheus-community/prometheus --namespace monitoring

              echo "Installing Grafana..."
              helm install grafana grafana/grafana --namespace monitoring

              echo "Exposing Prometheus and Grafana..."
              kubectl expose service prometheus-server --namespace monitoring --type=LoadBalancer --target-port=9090 --name=prometheus-server-ext
              kubectl expose service grafana --namespace monitoring --type=LoadBalancer --target-port=3000 --name=grafana-ext

              echo "Retrieving Prometheus and Grafana IPs..."
              kubectl get services -n monitoring

              echo "Retrieving Grafana Admin Password..."
              GRAFANA_PASSWORD=$(kubectl get secret --namespace monitoring grafana -o jsonpath="{.data.admin-password}" | base64 --decode)
              echo "##vso[task.setvariable variable=GRAFANA_PASSWORD;issecret=true]$GRAFANA_PASSWORD"
              echo "Grafana Admin Password set as a secret variable."
            displayName: "Configure Prometheus and Grafana"

          - script: |
             echo "Getting Monitoring Services..."
             kubectl get services -n monitoring

             echo "Getting Grafana Admin Password..."
             kubectl get secret --namespace monitoring grafana -o jsonpath="{.data.admin-password}" | base64 --decode
            displayName: "Get Monitoring Services and Grafana Password"
